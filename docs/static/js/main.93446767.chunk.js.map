{"version":3,"sources":["components/AddCategorias.js","components/GridItem.js","helpers/getGifs.js","components/GridGif.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategorias","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","GridItem","id","title","url","console","log","className","src","alt","getGifs","categoria","a","fetch","response","json","data","gifs","map","img","images","downsized_medium","GridGif","loading","state","setstate","useEffect","then","imgs","useFetchGifs","image","key","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAiCeA,MA9Bf,YAA2C,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEFC,mBAAS,cAFP,mBAE/BC,EAF+B,KAEnBC,EAFmB,KAmBtC,OACI,kBAAC,WAAD,KACI,0BAAMC,SAbO,SAACC,GAElBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAG1BR,GAAe,SAAAS,GAAU,OAAIP,GAAJ,mBAAkBO,OAC3CN,EAAc,OAOV,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAlBxB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aCMhBG,MAZf,YAA0C,IAArBC,EAAoB,EAApBA,GAAKC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,IAE7B,OADAC,QAAQC,IAAIJ,EAAKC,EAAOC,GAEpB,kBAAC,WAAD,KACE,yBAAKG,UAAU,0CACb,yBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,+BAAMA,M,uBCRLO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbR,EADa,0FAC4EO,GAD5E,SAEIE,MAAMT,GAFV,cAEbU,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KACd,SAAAC,GAAM,IAAD,EACD,MAAO,CACHjB,GAAKiB,EAAIjB,GACTC,MAAQgB,EAAIhB,MACZC,IAAG,UAAGe,EAAIC,cAAP,aAAG,EAAYC,iBAAiBjB,QAT5B,kBAaZa,GAbY,4CAAH,sDC0CLK,MArCf,YAAiC,IAAdX,EAAa,EAAbA,UAAa,ECFJ,SAAEA,GAAe,IAAD,EACdvB,mBAAS,CAC/B4B,KAAO,GACPO,SAAU,IAH0B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WACNhB,EAAQC,GAAWgB,MACf,SAAAC,GACIH,EACI,CACIT,KAAOY,EACPL,SAAU,SAK5B,CAAEZ,IACGa,EDf2BK,CAAalB,GAAjCS,EADc,EACpBJ,KAAcO,EADM,EACNA,QAItB,OAEI,kBAAC,WAAD,KACI,wBAAIhB,UAAU,qCAAd,IAAqDI,EAArD,KACEY,GAAW,uBAAGhB,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAEPa,EAAOF,KAAK,SAAAY,GAAK,OACb,kBAAC,EAAD,eACIC,IAAKD,EAAM5B,IACP4B,UEQjBE,EAvBM,WAAK,IAAD,EACe5C,mBAAS,CAAC,cADzB,mBACdQ,EADc,KACFT,EADE,KAMrB,OACI,kBAAC,WAAD,KACI,4CACA,6BACA,kBAAC,EAAD,CAAeA,cAAiBA,IAChC,4BAEQS,EAAWsB,KACP,SAAAP,GACI,OAAQ,kBAAC,EAAD,CAASoB,IAAMpB,EAAYA,UAAYA,UCf3EsB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.93446767.chunk.js","sourcesContent":["import React, { Fragment , useState } from 'react'\nimport PropTypes from 'prop-types';\n\nfunction AddCategorias({ setCategorias }) {\n\n    const [inputValue, setInputValue] = useState('Hola Mundo');\n    \n    const handleInputChange = (e) =>Â {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubMit = (e)=>{\n        // e.preventDefault(); previene el refresh por defecto del navegador, metodo antiguo.\n        e.preventDefault();\n        if(inputValue.trim().length > 2 ){\n            // se llama de esta forma porque es un callback\n            // esto es util ya que el callback maneja el estado anterior, ya que no se tiene acceso al valor de las categorias\n            setCategorias( categorias =>[inputValue,...categorias]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <Fragment>\n            <form onSubmit={ handleSubMit }>\n                <input type=\"text\" value={inputValue} onChange= { handleInputChange } />\n            </form>\n        </Fragment>\n    )\n}\nAddCategorias.propTypes = {\n    setCategorias : PropTypes.func.isRequired\n}\nexport default AddCategorias\n","import React, { Fragment } from 'react'\n\nfunction GridItem( { id , title, url } ) {\n    console.log(id , title, url);\n    return (\n        <Fragment>\n          <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p> { title}</p>\n          </div>\n        </Fragment>\n    )\n}\n\nexport default GridItem;\n","export const getGifs = async (categoria)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=J9NJp16KMDxMd41OnXZZXx8YOncIekHD&q=${categoria}`; \n    const response = await fetch(url);\n    const { data } = await response.json();\n    const gifs = data.map(\n        img=>{\n            return {\n                id : img.id,\n                title : img.title,\n                url : img.images?.downsized_medium.url\n            }\n        }\n    );\n    return gifs;\n}","import React, { Fragment, useState , useEffect } from 'react'\nimport GridItem from './GridItem';\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nfunction GridGif({ categoria }) {\n    const { data: images, loading } = useFetchGifs(categoria);\n    /*\n    const [images, setImages] = useState([]);\n    */\n    return (\n        \n        <Fragment>\n            <h3 className=\"animate__animated animate__fadeIn\"> { categoria } </h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map( image =>\n                        <GridItem \n                            key={image.id} \n                            {...image}\n                        />\n                    ) \n                }\n            </div>\n        </Fragment>\n    )\n}\n/*\n\n    <div className=\"card-grid\">\n                {\n                    images.map( image =>\n                        <GridItem \n                            key={image.id} \n                            {...image}\n                        />\n                    ) \n                }\n            </div>\n\n*/\nexport default GridGif;\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( categoria ) =>{\n    const [state, setstate] = useState({\n        data : [],\n        loading : true\n    }); \n\n    useEffect(()=>{\n        getGifs(categoria).then(\n            imgs=>{\n                setstate(\n                    {\n                        data : imgs,\n                        loading : false,\n                    }\n                );\n            }\n        )\n    },[ categoria ]);\n    return state;\n}","import React, { Fragment , useState } from 'react';\nimport  AddCategorias  from './AddCategorias'\nimport GridGif from './GridGif';\n\n\nconst GifExpertApp = ()=>{\n    const [categorias, setCategorias] = useState(['hunter x ']);\n    // handle = encargado de \n    const handleAdd = ()=> {\n        setCategorias([...categorias,'HUNTER X']);\n    }\n    return(\n        <Fragment>\n            <h1>GifExpertApp</h1>\n            <hr/>\n            <AddCategorias setCategorias= { setCategorias } />\n            <ol>\n                {\n                    categorias.map(\n                        categoria=>{\n                            return  <GridGif key={ categoria } categoria={ categoria }/>          \n                        }\n                    )\n                }\n            </ol>\n        </Fragment>\n    )\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}